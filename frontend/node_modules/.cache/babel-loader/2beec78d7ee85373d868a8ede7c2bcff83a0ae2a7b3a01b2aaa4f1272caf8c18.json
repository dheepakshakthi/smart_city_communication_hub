{"ast":null,"code":"var _jsxFileName = \"D:\\\\smart_city_communication_hub\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport './styles/DeviceIcons.css';\nimport Header from './components/Header';\nimport CityMap from './components/CityMap';\nimport Sidebar from './components/Sidebar';\nimport StatusPanel from './components/StatusPanel';\nimport AlertsPanel from './components/AlertsPanel';\nimport EnergyDashboard from './components/EnergyDashboard';\nimport SecurityPanel from './components/SecurityPanel';\nimport DeviceDetailsModal from './components/DeviceDetailsModal';\nimport LoadingScreen from './components/LoadingScreen';\nimport DepartmentDashboard from './components/DepartmentDashboard';\nimport { SocketService } from './services/socketService';\nimport { ApiService } from './services/apiService';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AppContainer = styled.div`\n  display: flex;\n  height: 100vh;\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  font-family: 'Inter', sans-serif;\n`;\n_c = AppContainer;\nconst MainContent = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n`;\n_c2 = MainContent;\nconst ContentArea = styled.div`\n  flex: 1;\n  display: flex;\n  position: relative;\n  overflow: hidden;\n`;\n_c3 = ContentArea;\nconst MapContainer = styled.div`\n  flex: 1;\n  position: relative;\n  background: #f0f2f5;\n`;\n_c4 = MapContainer;\nconst RightPanel = styled.div`\n  width: 400px;\n  background: rgba(255, 255, 255, 0.95);\n  backdrop-filter: blur(10px);\n  border-left: 1px solid rgba(255, 255, 255, 0.2);\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n`;\n_c5 = RightPanel;\nfunction App() {\n  _s();\n  const [loading, setLoading] = useState(true);\n  const [connected, setConnected] = useState(false);\n  const [currentView, setCurrentView] = useState('dashboard'); // 'dashboard' or 'departments'\n  const [cityData, setCityData] = useState({\n    devices: [],\n    edgeNodes: [],\n    energyStats: {},\n    securityStatus: {},\n    emergencyAlerts: []\n  });\n  const [selectedDevice, setSelectedDevice] = useState(null);\n  const [selectedPanel, setSelectedPanel] = useState('status');\n  const [simulationRunning, setSimulationRunning] = useState(false);\n  useEffect(() => {\n    initializeApp();\n    return () => {\n      SocketService.disconnect();\n    };\n  }, []);\n  const initializeApp = async () => {\n    try {\n      // Initialize API service\n      await ApiService.initialize();\n\n      // Initialize socket connection\n      await SocketService.initialize();\n\n      // Set up socket event listeners\n      setupSocketListeners();\n\n      // Load initial data\n      await loadInitialData();\n      setLoading(false);\n      toast.success('🏙️ Smart City Hub Connected!');\n    } catch (error) {\n      console.error('Failed to initialize app:', error);\n      toast.error('Failed to connect to Smart City Hub');\n      setLoading(false);\n    }\n  };\n  const setupSocketListeners = () => {\n    // Connection status\n    SocketService.on('connect', () => {\n      setConnected(true);\n      console.log('Connected to Smart City Hub');\n    });\n    SocketService.on('disconnect', () => {\n      setConnected(false);\n      console.log('Disconnected from Smart City Hub');\n    });\n\n    // City initialization\n    SocketService.on('city_initialized', data => {\n      setCityData({\n        devices: data.devices || [],\n        edgeNodes: data.edgeNodes || [],\n        energyStats: data.energyStats || {},\n        securityStatus: data.securityStatus || {},\n        emergencyAlerts: data.emergencyAlerts || []\n      });\n      console.log('City data initialized:', data);\n    });\n\n    // Real-time device data updates\n    SocketService.on('device_data', data => {\n      // Update device in the list\n      setCityData(prev => ({\n        ...prev,\n        devices: prev.devices.map(device => device.id === data.device.id ? {\n          ...device,\n          ...data.device\n        } : device)\n      }));\n    });\n\n    // Edge nodes status updates\n    SocketService.on('edge_nodes_status', edgeNodes => {\n      setCityData(prev => ({\n        ...prev,\n        edgeNodes: edgeNodes || []\n      }));\n    });\n\n    // Security status updates\n    SocketService.on('security_status', securityStatus => {\n      setCityData(prev => ({\n        ...prev,\n        securityStatus: securityStatus || {}\n      }));\n    });\n\n    // Energy statistics updates\n    SocketService.on('energy_stats', energyStats => {\n      setCityData(prev => ({\n        ...prev,\n        energyStats: energyStats || {}\n      }));\n    });\n\n    // Emergency alerts\n    SocketService.on('emergency_alert', alert => {\n      setCityData(prev => ({\n        ...prev,\n        emergencyAlerts: [...prev.emergencyAlerts, alert]\n      }));\n\n      // Show toast notification\n      const severity = alert.severity || 'medium';\n      const toastType = severity === 'high' ? 'error' : severity === 'medium' ? 'warning' : 'info';\n      toast[toastType](`🚨 ${alert.description}`);\n    });\n\n    // Alert cleared\n    SocketService.on('alert_cleared', data => {\n      setCityData(prev => ({\n        ...prev,\n        emergencyAlerts: prev.emergencyAlerts.filter(alert => alert.id !== data.alertId)\n      }));\n      toast.success('Alert cleared');\n    });\n\n    // Simulation status\n    SocketService.on('simulation_started', () => {\n      setSimulationRunning(true);\n      toast.success('🏙️ City simulation started');\n    });\n    SocketService.on('simulation_stopped', () => {\n      setSimulationRunning(false);\n      toast.info('🛑 City simulation stopped');\n    });\n\n    // Device details response\n    SocketService.on('device_details', deviceData => {\n      setSelectedDevice(deviceData);\n    });\n  };\n  const loadInitialData = async () => {\n    try {\n      var _statusRes$data;\n      const [statusRes, devicesRes, edgeNodesRes, energyRes, securityRes, alertsRes] = await Promise.all([ApiService.getCityStatus(), ApiService.getDevices(), ApiService.getEdgeNodes(), ApiService.getEnergyStats(), ApiService.getSecurityStatus(), ApiService.getAlerts()]);\n      setCityData({\n        devices: devicesRes.data || [],\n        edgeNodes: edgeNodesRes.data || [],\n        energyStats: energyRes.data || {},\n        securityStatus: securityRes.data || {},\n        emergencyAlerts: alertsRes.data || []\n      });\n      setSimulationRunning(((_statusRes$data = statusRes.data) === null || _statusRes$data === void 0 ? void 0 : _statusRes$data.isRunning) || false);\n    } catch (error) {\n      console.error('Failed to load initial data:', error);\n    }\n  };\n  const handleDeviceClick = deviceId => {\n    const device = cityData.devices.find(d => d.id === deviceId);\n    if (device) {\n      SocketService.emit('request_device_data', {\n        deviceId\n      });\n    }\n  };\n  const handleEmergencyTrigger = scenario => {\n    SocketService.emit('trigger_emergency', {\n      scenario\n    });\n    toast.info(`Triggering ${scenario} scenario...`);\n  };\n  const handleClearAlert = alertId => {\n    SocketService.emit('clear_alert', {\n      alertId\n    });\n  };\n  const toggleSimulation = () => {\n    if (simulationRunning) {\n      SocketService.emit('stop_simulation');\n    } else {\n      SocketService.emit('start_simulation');\n    }\n  };\n  const renderRightPanel = () => {\n    switch (selectedPanel) {\n      case 'status':\n        return /*#__PURE__*/_jsxDEV(StatusPanel, {\n          cityData: cityData,\n          simulationRunning: simulationRunning,\n          onToggleSimulation: toggleSimulation\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 11\n        }, this);\n      case 'alerts':\n        return /*#__PURE__*/_jsxDEV(AlertsPanel, {\n          alerts: cityData.emergencyAlerts,\n          securityStatus: cityData.securityStatus,\n          onClearAlert: handleClearAlert,\n          onTriggerEmergency: handleEmergencyTrigger\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 11\n        }, this);\n      case 'energy':\n        return /*#__PURE__*/_jsxDEV(EnergyDashboard, {\n          energyStats: cityData.energyStats,\n          devices: cityData.devices,\n          edgeNodes: cityData.edgeNodes\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 11\n        }, this);\n      case 'security':\n        return /*#__PURE__*/_jsxDEV(SecurityPanel, {\n          securityStatus: cityData.securityStatus,\n          devices: cityData.devices\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 11\n        }, this);\n      default:\n        return /*#__PURE__*/_jsxDEV(StatusPanel, {\n          cityData: cityData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 16\n        }, this);\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(LoadingScreen, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Show department dashboard if requested\n  if (currentView === 'departments') {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(DepartmentDashboard, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setCurrentView('dashboard'),\n        style: {\n          position: 'fixed',\n          top: '20px',\n          right: '20px',\n          background: '#667eea',\n          color: 'white',\n          border: 'none',\n          padding: '10px 20px',\n          borderRadius: '8px',\n          cursor: 'pointer',\n          zIndex: 1000\n        },\n        children: \"\\u2190 Back to Main Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {\n        position: \"top-right\",\n        autoClose: 5000,\n        hideProgressBar: false,\n        newestOnTop: false,\n        closeOnClick: true,\n        rtl: false,\n        pauseOnFocusLoss: true,\n        draggable: true,\n        pauseOnHover: true,\n        theme: \"dark\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n  return /*#__PURE__*/_jsxDEV(AppContainer, {\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      selectedPanel: selectedPanel,\n      onPanelSelect: setSelectedPanel,\n      connected: connected,\n      simulationRunning: simulationRunning,\n      onViewDepartments: () => setCurrentView('departments')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MainContent, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        connected: connected,\n        simulationRunning: simulationRunning,\n        deviceCount: cityData.devices.length,\n        alertCount: cityData.emergencyAlerts.length,\n        onToggleSimulation: toggleSimulation,\n        onViewDepartments: () => setCurrentView('departments')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ContentArea, {\n        children: [/*#__PURE__*/_jsxDEV(MapContainer, {\n          children: /*#__PURE__*/_jsxDEV(CityMap, {\n            devices: cityData.devices,\n            edgeNodes: cityData.edgeNodes,\n            emergencyAlerts: cityData.emergencyAlerts,\n            onDeviceClick: handleDeviceClick,\n            selectedDevice: selectedDevice\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 358,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 357,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(RightPanel, {\n          children: renderRightPanel()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 7\n    }, this), selectedDevice && /*#__PURE__*/_jsxDEV(DeviceDetailsModal, {\n      device: selectedDevice,\n      onClose: () => setSelectedDevice(null)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {\n      position: \"top-right\",\n      autoClose: 5000,\n      hideProgressBar: false,\n      newestOnTop: false,\n      closeOnClick: true,\n      rtl: false,\n      pauseOnFocusLoss: true,\n      draggable: true,\n      pauseOnHover: true,\n      theme: \"dark\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 337,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"s+YZZi9T6O3FUaJO1TJJ4e2fLUY=\");\n_c6 = App;\nexport default App;\nvar _c, _c2, _c3, _c4, _c5, _c6;\n$RefreshReg$(_c, \"AppContainer\");\n$RefreshReg$(_c2, \"MainContent\");\n$RefreshReg$(_c3, \"ContentArea\");\n$RefreshReg$(_c4, \"MapContainer\");\n$RefreshReg$(_c5, \"RightPanel\");\n$RefreshReg$(_c6, \"App\");","map":{"version":3,"names":["React","useState","useEffect","styled","ToastContainer","toast","Header","CityMap","Sidebar","StatusPanel","AlertsPanel","EnergyDashboard","SecurityPanel","DeviceDetailsModal","LoadingScreen","DepartmentDashboard","SocketService","ApiService","jsxDEV","_jsxDEV","Fragment","_Fragment","AppContainer","div","_c","MainContent","_c2","ContentArea","_c3","MapContainer","_c4","RightPanel","_c5","App","_s","loading","setLoading","connected","setConnected","currentView","setCurrentView","cityData","setCityData","devices","edgeNodes","energyStats","securityStatus","emergencyAlerts","selectedDevice","setSelectedDevice","selectedPanel","setSelectedPanel","simulationRunning","setSimulationRunning","initializeApp","disconnect","initialize","setupSocketListeners","loadInitialData","success","error","console","on","log","data","prev","map","device","id","alert","severity","toastType","description","filter","alertId","info","deviceData","_statusRes$data","statusRes","devicesRes","edgeNodesRes","energyRes","securityRes","alertsRes","Promise","all","getCityStatus","getDevices","getEdgeNodes","getEnergyStats","getSecurityStatus","getAlerts","isRunning","handleDeviceClick","deviceId","find","d","emit","handleEmergencyTrigger","scenario","handleClearAlert","toggleSimulation","renderRightPanel","onToggleSimulation","fileName","_jsxFileName","lineNumber","columnNumber","alerts","onClearAlert","onTriggerEmergency","children","onClick","style","position","top","right","background","color","border","padding","borderRadius","cursor","zIndex","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","theme","onPanelSelect","onViewDepartments","deviceCount","length","alertCount","onDeviceClick","onClose","_c6","$RefreshReg$"],"sources":["D:/smart_city_communication_hub/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport './styles/DeviceIcons.css';\r\n\r\nimport Header from './components/Header';\r\nimport CityMap from './components/CityMap';\r\nimport Sidebar from './components/Sidebar';\r\nimport StatusPanel from './components/StatusPanel';\r\nimport AlertsPanel from './components/AlertsPanel';\r\nimport EnergyDashboard from './components/EnergyDashboard';\r\nimport SecurityPanel from './components/SecurityPanel';\r\nimport DeviceDetailsModal from './components/DeviceDetailsModal';\r\nimport LoadingScreen from './components/LoadingScreen';\r\nimport DepartmentDashboard from './components/DepartmentDashboard';\r\n\r\nimport { SocketService } from './services/socketService';\r\nimport { ApiService } from './services/apiService';\r\n\r\nconst AppContainer = styled.div`\r\n  display: flex;\r\n  height: 100vh;\r\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n  font-family: 'Inter', sans-serif;\r\n`;\r\n\r\nconst MainContent = styled.div`\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  overflow: hidden;\r\n`;\r\n\r\nconst ContentArea = styled.div`\r\n  flex: 1;\r\n  display: flex;\r\n  position: relative;\r\n  overflow: hidden;\r\n`;\r\n\r\nconst MapContainer = styled.div`\r\n  flex: 1;\r\n  position: relative;\r\n  background: #f0f2f5;\r\n`;\r\n\r\nconst RightPanel = styled.div`\r\n  width: 400px;\r\n  background: rgba(255, 255, 255, 0.95);\r\n  backdrop-filter: blur(10px);\r\n  border-left: 1px solid rgba(255, 255, 255, 0.2);\r\n  display: flex;\r\n  flex-direction: column;\r\n  overflow: hidden;\r\n`;\r\n\r\nfunction App() {\r\n  const [loading, setLoading] = useState(true);\r\n  const [connected, setConnected] = useState(false);\r\n  const [currentView, setCurrentView] = useState('dashboard'); // 'dashboard' or 'departments'\r\n  const [cityData, setCityData] = useState({\r\n    devices: [],\r\n    edgeNodes: [],\r\n    energyStats: {},\r\n    securityStatus: {},\r\n    emergencyAlerts: []\r\n  });\r\n  const [selectedDevice, setSelectedDevice] = useState(null);\r\n  const [selectedPanel, setSelectedPanel] = useState('status');\r\n  const [simulationRunning, setSimulationRunning] = useState(false);\r\n\r\n  useEffect(() => {\r\n    initializeApp();\r\n    \r\n    return () => {\r\n      SocketService.disconnect();\r\n    };\r\n  }, []);\r\n\r\n  const initializeApp = async () => {\r\n    try {\r\n      // Initialize API service\r\n      await ApiService.initialize();\r\n      \r\n      // Initialize socket connection\r\n      await SocketService.initialize();\r\n      \r\n      // Set up socket event listeners\r\n      setupSocketListeners();\r\n      \r\n      // Load initial data\r\n      await loadInitialData();\r\n      \r\n      setLoading(false);\r\n      toast.success('🏙️ Smart City Hub Connected!');\r\n    } catch (error) {\r\n      console.error('Failed to initialize app:', error);\r\n      toast.error('Failed to connect to Smart City Hub');\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const setupSocketListeners = () => {\r\n    // Connection status\r\n    SocketService.on('connect', () => {\r\n      setConnected(true);\r\n      console.log('Connected to Smart City Hub');\r\n    });\r\n\r\n    SocketService.on('disconnect', () => {\r\n      setConnected(false);\r\n      console.log('Disconnected from Smart City Hub');\r\n    });\r\n\r\n    // City initialization\r\n    SocketService.on('city_initialized', (data) => {\r\n      setCityData({\r\n        devices: data.devices || [],\r\n        edgeNodes: data.edgeNodes || [],\r\n        energyStats: data.energyStats || {},\r\n        securityStatus: data.securityStatus || {},\r\n        emergencyAlerts: data.emergencyAlerts || []\r\n      });\r\n      console.log('City data initialized:', data);\r\n    });\r\n\r\n    // Real-time device data updates\r\n    SocketService.on('device_data', (data) => {\r\n      // Update device in the list\r\n      setCityData(prev => ({\r\n        ...prev,\r\n        devices: prev.devices.map(device => \r\n          device.id === data.device.id \r\n            ? { ...device, ...data.device }\r\n            : device\r\n        )\r\n      }));\r\n    });\r\n\r\n    // Edge nodes status updates\r\n    SocketService.on('edge_nodes_status', (edgeNodes) => {\r\n      setCityData(prev => ({\r\n        ...prev,\r\n        edgeNodes: edgeNodes || []\r\n      }));\r\n    });\r\n\r\n    // Security status updates\r\n    SocketService.on('security_status', (securityStatus) => {\r\n      setCityData(prev => ({\r\n        ...prev,\r\n        securityStatus: securityStatus || {}\r\n      }));\r\n    });\r\n\r\n    // Energy statistics updates\r\n    SocketService.on('energy_stats', (energyStats) => {\r\n      setCityData(prev => ({\r\n        ...prev,\r\n        energyStats: energyStats || {}\r\n      }));\r\n    });\r\n\r\n    // Emergency alerts\r\n    SocketService.on('emergency_alert', (alert) => {\r\n      setCityData(prev => ({\r\n        ...prev,\r\n        emergencyAlerts: [...prev.emergencyAlerts, alert]\r\n      }));\r\n      \r\n      // Show toast notification\r\n      const severity = alert.severity || 'medium';\r\n      const toastType = severity === 'high' ? 'error' : \r\n                       severity === 'medium' ? 'warning' : 'info';\r\n      \r\n      toast[toastType](`🚨 ${alert.description}`);\r\n    });\r\n\r\n    // Alert cleared\r\n    SocketService.on('alert_cleared', (data) => {\r\n      setCityData(prev => ({\r\n        ...prev,\r\n        emergencyAlerts: prev.emergencyAlerts.filter(alert => alert.id !== data.alertId)\r\n      }));\r\n      toast.success('Alert cleared');\r\n    });\r\n\r\n    // Simulation status\r\n    SocketService.on('simulation_started', () => {\r\n      setSimulationRunning(true);\r\n      toast.success('🏙️ City simulation started');\r\n    });\r\n\r\n    SocketService.on('simulation_stopped', () => {\r\n      setSimulationRunning(false);\r\n      toast.info('🛑 City simulation stopped');\r\n    });\r\n\r\n    // Device details response\r\n    SocketService.on('device_details', (deviceData) => {\r\n      setSelectedDevice(deviceData);\r\n    });\r\n  };\r\n\r\n  const loadInitialData = async () => {\r\n    try {\r\n      const [statusRes, devicesRes, edgeNodesRes, energyRes, securityRes, alertsRes] = await Promise.all([\r\n        ApiService.getCityStatus(),\r\n        ApiService.getDevices(),\r\n        ApiService.getEdgeNodes(),\r\n        ApiService.getEnergyStats(),\r\n        ApiService.getSecurityStatus(),\r\n        ApiService.getAlerts()\r\n      ]);\r\n\r\n      setCityData({\r\n        devices: devicesRes.data || [],\r\n        edgeNodes: edgeNodesRes.data || [],\r\n        energyStats: energyRes.data || {},\r\n        securityStatus: securityRes.data || {},\r\n        emergencyAlerts: alertsRes.data || []\r\n      });\r\n\r\n      setSimulationRunning(statusRes.data?.isRunning || false);\r\n    } catch (error) {\r\n      console.error('Failed to load initial data:', error);\r\n    }\r\n  };\r\n\r\n  const handleDeviceClick = (deviceId) => {\r\n    const device = cityData.devices.find(d => d.id === deviceId);\r\n    if (device) {\r\n      SocketService.emit('request_device_data', { deviceId });\r\n    }\r\n  };\r\n\r\n  const handleEmergencyTrigger = (scenario) => {\r\n    SocketService.emit('trigger_emergency', { scenario });\r\n    toast.info(`Triggering ${scenario} scenario...`);\r\n  };\r\n\r\n  const handleClearAlert = (alertId) => {\r\n    SocketService.emit('clear_alert', { alertId });\r\n  };\r\n\r\n  const toggleSimulation = () => {\r\n    if (simulationRunning) {\r\n      SocketService.emit('stop_simulation');\r\n    } else {\r\n      SocketService.emit('start_simulation');\r\n    }\r\n  };\r\n\r\n  const renderRightPanel = () => {\r\n    switch (selectedPanel) {\r\n      case 'status':\r\n        return (\r\n          <StatusPanel \r\n            cityData={cityData}\r\n            simulationRunning={simulationRunning}\r\n            onToggleSimulation={toggleSimulation}\r\n          />\r\n        );\r\n      case 'alerts':\r\n        return (\r\n          <AlertsPanel \r\n            alerts={cityData.emergencyAlerts}\r\n            securityStatus={cityData.securityStatus}\r\n            onClearAlert={handleClearAlert}\r\n            onTriggerEmergency={handleEmergencyTrigger}\r\n          />\r\n        );\r\n      case 'energy':\r\n        return (\r\n          <EnergyDashboard \r\n            energyStats={cityData.energyStats}\r\n            devices={cityData.devices}\r\n            edgeNodes={cityData.edgeNodes}\r\n          />\r\n        );\r\n      case 'security':\r\n        return (\r\n          <SecurityPanel \r\n            securityStatus={cityData.securityStatus}\r\n            devices={cityData.devices}\r\n          />\r\n        );\r\n      default:\r\n        return <StatusPanel cityData={cityData} />;\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return <LoadingScreen />;\r\n  }\r\n\r\n  // Show department dashboard if requested\r\n  if (currentView === 'departments') {\r\n    return (\r\n      <>\r\n        <DepartmentDashboard />\r\n        <button\r\n          onClick={() => setCurrentView('dashboard')}\r\n          style={{\r\n            position: 'fixed',\r\n            top: '20px',\r\n            right: '20px',\r\n            background: '#667eea',\r\n            color: 'white',\r\n            border: 'none',\r\n            padding: '10px 20px',\r\n            borderRadius: '8px',\r\n            cursor: 'pointer',\r\n            zIndex: 1000\r\n          }}\r\n        >\r\n          ← Back to Main Dashboard\r\n        </button>\r\n        <ToastContainer\r\n          position=\"top-right\"\r\n          autoClose={5000}\r\n          hideProgressBar={false}\r\n          newestOnTop={false}\r\n          closeOnClick\r\n          rtl={false}\r\n          pauseOnFocusLoss\r\n          draggable\r\n          pauseOnHover\r\n          theme=\"dark\"\r\n        />\r\n      </>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <AppContainer>\r\n      <Sidebar \r\n        selectedPanel={selectedPanel}\r\n        onPanelSelect={setSelectedPanel}\r\n        connected={connected}\r\n        simulationRunning={simulationRunning}\r\n        onViewDepartments={() => setCurrentView('departments')}\r\n      />\r\n      \r\n      <MainContent>\r\n        <Header \r\n          connected={connected}\r\n          simulationRunning={simulationRunning}\r\n          deviceCount={cityData.devices.length}\r\n          alertCount={cityData.emergencyAlerts.length}\r\n          onToggleSimulation={toggleSimulation}\r\n          onViewDepartments={() => setCurrentView('departments')}\r\n        />\r\n        \r\n        <ContentArea>\r\n          <MapContainer>\r\n            <CityMap \r\n              devices={cityData.devices}\r\n              edgeNodes={cityData.edgeNodes}\r\n              emergencyAlerts={cityData.emergencyAlerts}\r\n              onDeviceClick={handleDeviceClick}\r\n              selectedDevice={selectedDevice}\r\n            />\r\n          </MapContainer>\r\n          \r\n          <RightPanel>\r\n            {renderRightPanel()}\r\n          </RightPanel>\r\n        </ContentArea>\r\n      </MainContent>\r\n\r\n      {selectedDevice && (\r\n        <DeviceDetailsModal\r\n          device={selectedDevice}\r\n          onClose={() => setSelectedDevice(null)}\r\n        />\r\n      )}\r\n\r\n      <ToastContainer\r\n        position=\"top-right\"\r\n        autoClose={5000}\r\n        hideProgressBar={false}\r\n        newestOnTop={false}\r\n        closeOnClick\r\n        rtl={false}\r\n        pauseOnFocusLoss\r\n        draggable\r\n        pauseOnHover\r\n        theme=\"dark\"\r\n      />\r\n    </AppContainer>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}