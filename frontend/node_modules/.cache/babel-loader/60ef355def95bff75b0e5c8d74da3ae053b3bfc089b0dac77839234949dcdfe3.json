{"ast":null,"code":"var _jsxFileName = \"D:\\\\smart_city_communication_hub\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport './styles/DeviceIcons.css';\nimport Header from './components/Header';\nimport CityMap from './components/CityMap';\nimport Sidebar from './components/Sidebar';\nimport StatusPanel from './components/StatusPanel';\nimport AlertsPanel from './components/AlertsPanel';\nimport EnergyDashboard from './components/EnergyDashboard';\nimport SecurityPanel from './components/SecurityPanel';\nimport DeviceDetailsModal from './components/DeviceDetailsModal';\nimport LoadingScreen from './components/LoadingScreen';\nimport { SocketService } from './services/socketService';\nimport { ApiService } from './services/apiService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AppContainer = styled.div`\n  display: flex;\n  height: 100vh;\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  font-family: 'Inter', sans-serif;\n`;\n_c = AppContainer;\nconst MainContent = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n`;\n_c2 = MainContent;\nconst ContentArea = styled.div`\n  flex: 1;\n  display: flex;\n  position: relative;\n  overflow: hidden;\n`;\n_c3 = ContentArea;\nconst MapContainer = styled.div`\n  flex: 1;\n  position: relative;\n  background: #f0f2f5;\n`;\n_c4 = MapContainer;\nconst RightPanel = styled.div`\n  width: 400px;\n  background: rgba(255, 255, 255, 0.95);\n  backdrop-filter: blur(10px);\n  border-left: 1px solid rgba(255, 255, 255, 0.2);\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n`;\n_c5 = RightPanel;\nfunction App() {\n  _s();\n  const [loading, setLoading] = useState(true);\n  const [connected, setConnected] = useState(false);\n  const [cityData, setCityData] = useState({\n    devices: [],\n    edgeNodes: [],\n    energyStats: {},\n    securityStatus: {},\n    emergencyAlerts: []\n  });\n  const [selectedDevice, setSelectedDevice] = useState(null);\n  const [selectedPanel, setSelectedPanel] = useState('status');\n  const [simulationRunning, setSimulationRunning] = useState(false);\n  useEffect(() => {\n    initializeApp();\n    return () => {\n      SocketService.disconnect();\n    };\n  }, []);\n  const initializeApp = async () => {\n    try {\n      // Initialize API service\n      await ApiService.initialize();\n\n      // Initialize socket connection\n      await SocketService.initialize();\n\n      // Set up socket event listeners\n      setupSocketListeners();\n\n      // Load initial data\n      await loadInitialData();\n      setLoading(false);\n      toast.success('🏙️ Smart City Hub Connected!');\n    } catch (error) {\n      console.error('Failed to initialize app:', error);\n      toast.error('Failed to connect to Smart City Hub');\n      setLoading(false);\n    }\n  };\n  const setupSocketListeners = () => {\n    // Connection status\n    SocketService.on('connect', () => {\n      setConnected(true);\n      console.log('Connected to Smart City Hub');\n    });\n    SocketService.on('disconnect', () => {\n      setConnected(false);\n      console.log('Disconnected from Smart City Hub');\n    });\n\n    // City initialization\n    SocketService.on('city_initialized', data => {\n      setCityData({\n        devices: data.devices || [],\n        edgeNodes: data.edgeNodes || [],\n        energyStats: data.energyStats || {},\n        securityStatus: data.securityStatus || {},\n        emergencyAlerts: data.emergencyAlerts || []\n      });\n      console.log('City data initialized:', data);\n    });\n\n    // Real-time device data updates\n    SocketService.on('device_data', data => {\n      // Update device in the list\n      setCityData(prev => ({\n        ...prev,\n        devices: prev.devices.map(device => device.id === data.device.id ? {\n          ...device,\n          ...data.device\n        } : device)\n      }));\n    });\n\n    // Edge nodes status updates\n    SocketService.on('edge_nodes_status', edgeNodes => {\n      setCityData(prev => ({\n        ...prev,\n        edgeNodes: edgeNodes || []\n      }));\n    });\n\n    // Security status updates\n    SocketService.on('security_status', securityStatus => {\n      setCityData(prev => ({\n        ...prev,\n        securityStatus: securityStatus || {}\n      }));\n    });\n\n    // Energy statistics updates\n    SocketService.on('energy_stats', energyStats => {\n      setCityData(prev => ({\n        ...prev,\n        energyStats: energyStats || {}\n      }));\n    });\n\n    // Emergency alerts\n    SocketService.on('emergency_alert', alert => {\n      setCityData(prev => ({\n        ...prev,\n        emergencyAlerts: [...prev.emergencyAlerts, alert]\n      }));\n\n      // Show toast notification\n      const severity = alert.severity || 'medium';\n      const toastType = severity === 'high' ? 'error' : severity === 'medium' ? 'warning' : 'info';\n      toast[toastType](`🚨 ${alert.description}`);\n    });\n\n    // Alert cleared\n    SocketService.on('alert_cleared', data => {\n      setCityData(prev => ({\n        ...prev,\n        emergencyAlerts: prev.emergencyAlerts.filter(alert => alert.id !== data.alertId)\n      }));\n      toast.success('Alert cleared');\n    });\n\n    // Simulation status\n    SocketService.on('simulation_started', () => {\n      setSimulationRunning(true);\n      toast.success('🏙️ City simulation started');\n    });\n    SocketService.on('simulation_stopped', () => {\n      setSimulationRunning(false);\n      toast.info('🛑 City simulation stopped');\n    });\n\n    // Device details response\n    SocketService.on('device_details', deviceData => {\n      setSelectedDevice(deviceData);\n    });\n  };\n  const loadInitialData = async () => {\n    try {\n      var _statusRes$data;\n      const [statusRes, devicesRes, edgeNodesRes, energyRes, securityRes, alertsRes] = await Promise.all([ApiService.getCityStatus(), ApiService.getDevices(), ApiService.getEdgeNodes(), ApiService.getEnergyStats(), ApiService.getSecurityStatus(), ApiService.getAlerts()]);\n      setCityData({\n        devices: devicesRes.data || [],\n        edgeNodes: edgeNodesRes.data || [],\n        energyStats: energyRes.data || {},\n        securityStatus: securityRes.data || {},\n        emergencyAlerts: alertsRes.data || []\n      });\n      setSimulationRunning(((_statusRes$data = statusRes.data) === null || _statusRes$data === void 0 ? void 0 : _statusRes$data.isRunning) || false);\n    } catch (error) {\n      console.error('Failed to load initial data:', error);\n    }\n  };\n  const handleDeviceClick = deviceId => {\n    const device = cityData.devices.find(d => d.id === deviceId);\n    if (device) {\n      SocketService.emit('request_device_data', {\n        deviceId\n      });\n    }\n  };\n  const handleEmergencyTrigger = scenario => {\n    SocketService.emit('trigger_emergency', {\n      scenario\n    });\n    toast.info(`Triggering ${scenario} scenario...`);\n  };\n  const handleClearAlert = alertId => {\n    SocketService.emit('clear_alert', {\n      alertId\n    });\n  };\n  const toggleSimulation = () => {\n    if (simulationRunning) {\n      SocketService.emit('stop_simulation');\n    } else {\n      SocketService.emit('start_simulation');\n    }\n  };\n  const renderRightPanel = () => {\n    switch (selectedPanel) {\n      case 'status':\n        return /*#__PURE__*/_jsxDEV(StatusPanel, {\n          cityData: cityData,\n          simulationRunning: simulationRunning,\n          onToggleSimulation: toggleSimulation\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 11\n        }, this);\n      case 'alerts':\n        return /*#__PURE__*/_jsxDEV(AlertsPanel, {\n          alerts: cityData.emergencyAlerts,\n          securityStatus: cityData.securityStatus,\n          onClearAlert: handleClearAlert,\n          onTriggerEmergency: handleEmergencyTrigger\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 11\n        }, this);\n      case 'energy':\n        return /*#__PURE__*/_jsxDEV(EnergyDashboard, {\n          energyStats: cityData.energyStats,\n          devices: cityData.devices,\n          edgeNodes: cityData.edgeNodes\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 11\n        }, this);\n      case 'security':\n        return /*#__PURE__*/_jsxDEV(SecurityPanel, {\n          securityStatus: cityData.securityStatus,\n          devices: cityData.devices\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 11\n        }, this);\n      default:\n        return /*#__PURE__*/_jsxDEV(StatusPanel, {\n          cityData: cityData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 16\n        }, this);\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(LoadingScreen, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(AppContainer, {\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      selectedPanel: selectedPanel,\n      onPanelSelect: setSelectedPanel,\n      connected: connected,\n      simulationRunning: simulationRunning\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MainContent, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        connected: connected,\n        simulationRunning: simulationRunning,\n        deviceCount: cityData.devices.length,\n        alertCount: cityData.emergencyAlerts.length,\n        onToggleSimulation: toggleSimulation\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ContentArea, {\n        children: [/*#__PURE__*/_jsxDEV(MapContainer, {\n          children: /*#__PURE__*/_jsxDEV(CityMap, {\n            devices: cityData.devices,\n            edgeNodes: cityData.edgeNodes,\n            emergencyAlerts: cityData.emergencyAlerts,\n            onDeviceClick: handleDeviceClick,\n            selectedDevice: selectedDevice\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 316,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(RightPanel, {\n          children: renderRightPanel()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 7\n    }, this), selectedDevice && /*#__PURE__*/_jsxDEV(DeviceDetailsModal, {\n      device: selectedDevice,\n      onClose: () => setSelectedDevice(null)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {\n      position: \"top-right\",\n      autoClose: 5000,\n      hideProgressBar: false,\n      newestOnTop: false,\n      closeOnClick: true,\n      rtl: false,\n      pauseOnFocusLoss: true,\n      draggable: true,\n      pauseOnHover: true,\n      theme: \"dark\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 297,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"lv5BmHNOsm24ybJpXmm4usKI9/U=\");\n_c6 = App;\nexport default App;\nvar _c, _c2, _c3, _c4, _c5, _c6;\n$RefreshReg$(_c, \"AppContainer\");\n$RefreshReg$(_c2, \"MainContent\");\n$RefreshReg$(_c3, \"ContentArea\");\n$RefreshReg$(_c4, \"MapContainer\");\n$RefreshReg$(_c5, \"RightPanel\");\n$RefreshReg$(_c6, \"App\");","map":{"version":3,"names":["React","useState","useEffect","styled","ToastContainer","toast","Header","CityMap","Sidebar","StatusPanel","AlertsPanel","EnergyDashboard","SecurityPanel","DeviceDetailsModal","LoadingScreen","SocketService","ApiService","jsxDEV","_jsxDEV","AppContainer","div","_c","MainContent","_c2","ContentArea","_c3","MapContainer","_c4","RightPanel","_c5","App","_s","loading","setLoading","connected","setConnected","cityData","setCityData","devices","edgeNodes","energyStats","securityStatus","emergencyAlerts","selectedDevice","setSelectedDevice","selectedPanel","setSelectedPanel","simulationRunning","setSimulationRunning","initializeApp","disconnect","initialize","setupSocketListeners","loadInitialData","success","error","console","on","log","data","prev","map","device","id","alert","severity","toastType","description","filter","alertId","info","deviceData","_statusRes$data","statusRes","devicesRes","edgeNodesRes","energyRes","securityRes","alertsRes","Promise","all","getCityStatus","getDevices","getEdgeNodes","getEnergyStats","getSecurityStatus","getAlerts","isRunning","handleDeviceClick","deviceId","find","d","emit","handleEmergencyTrigger","scenario","handleClearAlert","toggleSimulation","renderRightPanel","onToggleSimulation","fileName","_jsxFileName","lineNumber","columnNumber","alerts","onClearAlert","onTriggerEmergency","children","onPanelSelect","deviceCount","length","alertCount","onDeviceClick","onClose","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","theme","_c6","$RefreshReg$"],"sources":["D:/smart_city_communication_hub/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport './styles/DeviceIcons.css';\r\n\r\nimport Header from './components/Header';\r\nimport CityMap from './components/CityMap';\r\nimport Sidebar from './components/Sidebar';\r\nimport StatusPanel from './components/StatusPanel';\r\nimport AlertsPanel from './components/AlertsPanel';\r\nimport EnergyDashboard from './components/EnergyDashboard';\r\nimport SecurityPanel from './components/SecurityPanel';\r\nimport DeviceDetailsModal from './components/DeviceDetailsModal';\r\nimport LoadingScreen from './components/LoadingScreen';\r\n\r\nimport { SocketService } from './services/socketService';\r\nimport { ApiService } from './services/apiService';\r\n\r\nconst AppContainer = styled.div`\r\n  display: flex;\r\n  height: 100vh;\r\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n  font-family: 'Inter', sans-serif;\r\n`;\r\n\r\nconst MainContent = styled.div`\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  overflow: hidden;\r\n`;\r\n\r\nconst ContentArea = styled.div`\r\n  flex: 1;\r\n  display: flex;\r\n  position: relative;\r\n  overflow: hidden;\r\n`;\r\n\r\nconst MapContainer = styled.div`\r\n  flex: 1;\r\n  position: relative;\r\n  background: #f0f2f5;\r\n`;\r\n\r\nconst RightPanel = styled.div`\r\n  width: 400px;\r\n  background: rgba(255, 255, 255, 0.95);\r\n  backdrop-filter: blur(10px);\r\n  border-left: 1px solid rgba(255, 255, 255, 0.2);\r\n  display: flex;\r\n  flex-direction: column;\r\n  overflow: hidden;\r\n`;\r\n\r\nfunction App() {\r\n  const [loading, setLoading] = useState(true);\r\n  const [connected, setConnected] = useState(false);\r\n  const [cityData, setCityData] = useState({\r\n    devices: [],\r\n    edgeNodes: [],\r\n    energyStats: {},\r\n    securityStatus: {},\r\n    emergencyAlerts: []\r\n  });\r\n  const [selectedDevice, setSelectedDevice] = useState(null);\r\n  const [selectedPanel, setSelectedPanel] = useState('status');\r\n  const [simulationRunning, setSimulationRunning] = useState(false);\r\n\r\n  useEffect(() => {\r\n    initializeApp();\r\n    \r\n    return () => {\r\n      SocketService.disconnect();\r\n    };\r\n  }, []);\r\n\r\n  const initializeApp = async () => {\r\n    try {\r\n      // Initialize API service\r\n      await ApiService.initialize();\r\n      \r\n      // Initialize socket connection\r\n      await SocketService.initialize();\r\n      \r\n      // Set up socket event listeners\r\n      setupSocketListeners();\r\n      \r\n      // Load initial data\r\n      await loadInitialData();\r\n      \r\n      setLoading(false);\r\n      toast.success('🏙️ Smart City Hub Connected!');\r\n    } catch (error) {\r\n      console.error('Failed to initialize app:', error);\r\n      toast.error('Failed to connect to Smart City Hub');\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const setupSocketListeners = () => {\r\n    // Connection status\r\n    SocketService.on('connect', () => {\r\n      setConnected(true);\r\n      console.log('Connected to Smart City Hub');\r\n    });\r\n\r\n    SocketService.on('disconnect', () => {\r\n      setConnected(false);\r\n      console.log('Disconnected from Smart City Hub');\r\n    });\r\n\r\n    // City initialization\r\n    SocketService.on('city_initialized', (data) => {\r\n      setCityData({\r\n        devices: data.devices || [],\r\n        edgeNodes: data.edgeNodes || [],\r\n        energyStats: data.energyStats || {},\r\n        securityStatus: data.securityStatus || {},\r\n        emergencyAlerts: data.emergencyAlerts || []\r\n      });\r\n      console.log('City data initialized:', data);\r\n    });\r\n\r\n    // Real-time device data updates\r\n    SocketService.on('device_data', (data) => {\r\n      // Update device in the list\r\n      setCityData(prev => ({\r\n        ...prev,\r\n        devices: prev.devices.map(device => \r\n          device.id === data.device.id \r\n            ? { ...device, ...data.device }\r\n            : device\r\n        )\r\n      }));\r\n    });\r\n\r\n    // Edge nodes status updates\r\n    SocketService.on('edge_nodes_status', (edgeNodes) => {\r\n      setCityData(prev => ({\r\n        ...prev,\r\n        edgeNodes: edgeNodes || []\r\n      }));\r\n    });\r\n\r\n    // Security status updates\r\n    SocketService.on('security_status', (securityStatus) => {\r\n      setCityData(prev => ({\r\n        ...prev,\r\n        securityStatus: securityStatus || {}\r\n      }));\r\n    });\r\n\r\n    // Energy statistics updates\r\n    SocketService.on('energy_stats', (energyStats) => {\r\n      setCityData(prev => ({\r\n        ...prev,\r\n        energyStats: energyStats || {}\r\n      }));\r\n    });\r\n\r\n    // Emergency alerts\r\n    SocketService.on('emergency_alert', (alert) => {\r\n      setCityData(prev => ({\r\n        ...prev,\r\n        emergencyAlerts: [...prev.emergencyAlerts, alert]\r\n      }));\r\n      \r\n      // Show toast notification\r\n      const severity = alert.severity || 'medium';\r\n      const toastType = severity === 'high' ? 'error' : \r\n                       severity === 'medium' ? 'warning' : 'info';\r\n      \r\n      toast[toastType](`🚨 ${alert.description}`);\r\n    });\r\n\r\n    // Alert cleared\r\n    SocketService.on('alert_cleared', (data) => {\r\n      setCityData(prev => ({\r\n        ...prev,\r\n        emergencyAlerts: prev.emergencyAlerts.filter(alert => alert.id !== data.alertId)\r\n      }));\r\n      toast.success('Alert cleared');\r\n    });\r\n\r\n    // Simulation status\r\n    SocketService.on('simulation_started', () => {\r\n      setSimulationRunning(true);\r\n      toast.success('🏙️ City simulation started');\r\n    });\r\n\r\n    SocketService.on('simulation_stopped', () => {\r\n      setSimulationRunning(false);\r\n      toast.info('🛑 City simulation stopped');\r\n    });\r\n\r\n    // Device details response\r\n    SocketService.on('device_details', (deviceData) => {\r\n      setSelectedDevice(deviceData);\r\n    });\r\n  };\r\n\r\n  const loadInitialData = async () => {\r\n    try {\r\n      const [statusRes, devicesRes, edgeNodesRes, energyRes, securityRes, alertsRes] = await Promise.all([\r\n        ApiService.getCityStatus(),\r\n        ApiService.getDevices(),\r\n        ApiService.getEdgeNodes(),\r\n        ApiService.getEnergyStats(),\r\n        ApiService.getSecurityStatus(),\r\n        ApiService.getAlerts()\r\n      ]);\r\n\r\n      setCityData({\r\n        devices: devicesRes.data || [],\r\n        edgeNodes: edgeNodesRes.data || [],\r\n        energyStats: energyRes.data || {},\r\n        securityStatus: securityRes.data || {},\r\n        emergencyAlerts: alertsRes.data || []\r\n      });\r\n\r\n      setSimulationRunning(statusRes.data?.isRunning || false);\r\n    } catch (error) {\r\n      console.error('Failed to load initial data:', error);\r\n    }\r\n  };\r\n\r\n  const handleDeviceClick = (deviceId) => {\r\n    const device = cityData.devices.find(d => d.id === deviceId);\r\n    if (device) {\r\n      SocketService.emit('request_device_data', { deviceId });\r\n    }\r\n  };\r\n\r\n  const handleEmergencyTrigger = (scenario) => {\r\n    SocketService.emit('trigger_emergency', { scenario });\r\n    toast.info(`Triggering ${scenario} scenario...`);\r\n  };\r\n\r\n  const handleClearAlert = (alertId) => {\r\n    SocketService.emit('clear_alert', { alertId });\r\n  };\r\n\r\n  const toggleSimulation = () => {\r\n    if (simulationRunning) {\r\n      SocketService.emit('stop_simulation');\r\n    } else {\r\n      SocketService.emit('start_simulation');\r\n    }\r\n  };\r\n\r\n  const renderRightPanel = () => {\r\n    switch (selectedPanel) {\r\n      case 'status':\r\n        return (\r\n          <StatusPanel \r\n            cityData={cityData}\r\n            simulationRunning={simulationRunning}\r\n            onToggleSimulation={toggleSimulation}\r\n          />\r\n        );\r\n      case 'alerts':\r\n        return (\r\n          <AlertsPanel \r\n            alerts={cityData.emergencyAlerts}\r\n            securityStatus={cityData.securityStatus}\r\n            onClearAlert={handleClearAlert}\r\n            onTriggerEmergency={handleEmergencyTrigger}\r\n          />\r\n        );\r\n      case 'energy':\r\n        return (\r\n          <EnergyDashboard \r\n            energyStats={cityData.energyStats}\r\n            devices={cityData.devices}\r\n            edgeNodes={cityData.edgeNodes}\r\n          />\r\n        );\r\n      case 'security':\r\n        return (\r\n          <SecurityPanel \r\n            securityStatus={cityData.securityStatus}\r\n            devices={cityData.devices}\r\n          />\r\n        );\r\n      default:\r\n        return <StatusPanel cityData={cityData} />;\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return <LoadingScreen />;\r\n  }\r\n\r\n  return (\r\n    <AppContainer>\r\n      <Sidebar \r\n        selectedPanel={selectedPanel}\r\n        onPanelSelect={setSelectedPanel}\r\n        connected={connected}\r\n        simulationRunning={simulationRunning}\r\n      />\r\n      \r\n      <MainContent>\r\n        <Header \r\n          connected={connected}\r\n          simulationRunning={simulationRunning}\r\n          deviceCount={cityData.devices.length}\r\n          alertCount={cityData.emergencyAlerts.length}\r\n          onToggleSimulation={toggleSimulation}\r\n        />\r\n        \r\n        <ContentArea>\r\n          <MapContainer>\r\n            <CityMap \r\n              devices={cityData.devices}\r\n              edgeNodes={cityData.edgeNodes}\r\n              emergencyAlerts={cityData.emergencyAlerts}\r\n              onDeviceClick={handleDeviceClick}\r\n              selectedDevice={selectedDevice}\r\n            />\r\n          </MapContainer>\r\n          \r\n          <RightPanel>\r\n            {renderRightPanel()}\r\n          </RightPanel>\r\n        </ContentArea>\r\n      </MainContent>\r\n\r\n      {selectedDevice && (\r\n        <DeviceDetailsModal\r\n          device={selectedDevice}\r\n          onClose={() => setSelectedDevice(null)}\r\n        />\r\n      )}\r\n\r\n      <ToastContainer\r\n        position=\"top-right\"\r\n        autoClose={5000}\r\n        hideProgressBar={false}\r\n        newestOnTop={false}\r\n        closeOnClick\r\n        rtl={false}\r\n        pauseOnFocusLoss\r\n        draggable\r\n        pauseOnHover\r\n        theme=\"dark\"\r\n      />\r\n    </AppContainer>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}